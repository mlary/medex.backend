// <auto-generated />
using System;
using Medex.Domains;
using Medex.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Medex.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200322114706_change length of InterName")]
    partial class changelengthofInterName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Medex.Domains.Models.Distributor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Distributors");
                });

            modelBuilder.Entity("Medex.Domains.Models.GroupName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("GroupNames");
                });

            modelBuilder.Entity("Medex.Domains.Models.InterName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("InterNames");
                });

            modelBuilder.Entity("Medex.Domains.Models.Manufacture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Manufactures");
                });

            modelBuilder.Entity("Medex.Domains.Models.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal>("DollarRate");

                    b.Property<decimal>("EuroRate");

                    b.Property<DateTime>("PublicDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Medex.Domains.Models.PriceFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Data");

                    b.Property<long>("PriceId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PriceId")
                        .IsUnique();

                    b.ToTable("PriceFiles");
                });

            modelBuilder.Entity("Medex.Domains.Models.PriceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<decimal>("CostInDollar");

                    b.Property<decimal>("CostInEuro");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("Date");

                    b.Property<long>("DistributorId");

                    b.Property<decimal>("Margin");

                    b.Property<long>("PriceId");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("PriceId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceItems");
                });

            modelBuilder.Entity("Medex.Domains.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GroupNameId");

                    b.Property<long>("InterNameId");

                    b.Property<long>("ManufacturerId");

                    b.Property<string>("Name")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("GroupNameId");

                    b.HasIndex("InterNameId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Medex.Domains.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Code");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Medex.Domains.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .HasMaxLength(200);

                    b.Property<bool>("IsConfirmed")
                        .HasMaxLength(200);

                    b.Property<bool>("IsEmailSent")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .HasMaxLength(200);

                    b.Property<string>("Login")
                        .HasMaxLength(200);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Medex.Domains.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Medex.Domains.Models.PriceFile", b =>
                {
                    b.HasOne("Medex.Domains.Models.Price", "Price")
                        .WithOne("PriceFile")
                        .HasForeignKey("Medex.Domains.Models.PriceFile", "PriceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medex.Domains.Models.PriceItem", b =>
                {
                    b.HasOne("Medex.Domains.Models.Distributor", "Distributor")
                        .WithMany("PriceItems")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medex.Domains.Models.Price", "Price")
                        .WithMany("PriceItems")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medex.Domains.Models.Product", "Product")
                        .WithMany("PriceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medex.Domains.Models.Product", b =>
                {
                    b.HasOne("Medex.Domains.Models.GroupName", "GroupName")
                        .WithMany("Products")
                        .HasForeignKey("GroupNameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medex.Domains.Models.InterName", "InterName")
                        .WithMany("Products")
                        .HasForeignKey("InterNameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medex.Domains.Models.Manufacture", "Manufacture")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medex.Domains.Models.UserRole", b =>
                {
                    b.HasOne("Medex.Domains.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medex.Domains.Models.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("Medex.Domains.Models.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
